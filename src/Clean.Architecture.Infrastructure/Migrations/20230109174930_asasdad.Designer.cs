// <auto-generated />
using System;
using Clean.Architecture.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clean.Architecture.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230109174930_asasdad")]
    partial class asasdad
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AreaLead", b =>
                {
                    b.Property<int>("AreasOfInterestId")
                        .HasColumnType("int");

                    b.Property<int>("InterestedLeadsId")
                        .HasColumnType("int");

                    b.HasKey("AreasOfInterestId", "InterestedLeadsId");

                    b.HasIndex("InterestedLeadsId");

                    b.ToTable("AreaLead");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionsCount")
                        .HasColumnType("int");

                    b.Property<bool>("AssignToLead")
                        .HasColumnType("bit");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstActionDelay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotifsToListenTo")
                        .HasColumnType("int");

                    b.Property<bool>("StopPlanOnInteraction")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("TimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Triggers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("ActionPlans");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlanAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionPlanId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ActionPlanTriggeredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomDelay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstActionHangfireId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("ThisActionPlanStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TriggerNotificationId")
                        .HasColumnType("int");

                    b.Property<int?>("currentTrackedActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionPlanId");

                    b.HasIndex("LeadId");

                    b.ToTable("ActionPlanAssociations");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionTracker", b =>
                {
                    b.Property<int>("ActionPlanAssociationId")
                        .HasColumnType("int");

                    b.Property<int>("TrackedActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionResultId")
                        .HasColumnType("int");

                    b.Property<int>("ActionStatus")
                        .HasColumnType("int");

                    b.Property<string>("ActionStatusInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExecutionCompletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("HangfireJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("HangfireScheduledStartTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ActionPlanAssociationId", "TrackedActionId");

                    b.HasIndex("TrackedActionId");

                    b.ToTable("ActionTrackers");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionLevel")
                        .HasColumnType("int");

                    b.Property<int>("ActionPlanId")
                        .HasColumnType("int");

                    b.Property<string>("ActionProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextActionDelay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionPlanId");

                    b.ToTable("Actions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActionBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminStripeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AzureTenantID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAdminEmailConsent")
                        .HasColumnType("bit");

                    b.Property<string>("LastCheckoutSessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBrokersInDatabase")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBrokersInSubscription")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SignupDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("SubscriptionLastValidDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedBrokersCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateOfListing")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccountActive")
                        .HasColumnType("bit");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotifsForActionPlans")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.BrokerListingAssignment", b =>
                {
                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("assignmentDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("BrokerId", "ListingId");

                    b.HasIndex("ListingId");

                    b.ToTable("BrokerListingAssignments");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.ConnectedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailNumber")
                        .HasColumnType("int");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FirstSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GraphSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SubsExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SubsRenewalJobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyncJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SyncScheduled")
                        .HasColumnType("bit");

                    b.Property<bool>("isMSFT")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("GraphSubscriptionId");

                    b.ToTable("ConnectedEmails");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.FolderSync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectedEmailId")
                        .HasColumnType("int");

                    b.Property<string>("DeltaToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedEmailId");

                    b.ToTable("FolderSyncs");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("templateText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Templates");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Template");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TaskDueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("LeadId");

                    b.ToTable("ToDoTasks");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.LeadInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<bool>("isReceived")
                        .HasColumnType("bit");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadInteractions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LeadInteraction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Areas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LeadFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("leadSourceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("leadType")
                        .HasColumnType("int");

                    b.Property<int>("source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("ListingId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("NotesText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.NotificationAggregate.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("NotifCreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NotifHandlingStatus")
                        .HasColumnType("int");

                    b.Property<string>("NotifProps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotifType")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyBroker")
                        .HasColumnType("bit");

                    b.Property<bool>("ReadByBroker")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UnderlyingEventTimeStamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TasksAggregate.RecurrentTaskBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HangfireTaskId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("NextScheduledTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("taskStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("RecurrentTasks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecurrentTaskBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TestAggregate.TestBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextActionDelay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TestBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LeadTag", b =>
                {
                    b.Property<int>("LeadsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("LeadsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("LeadTag");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ChangeLeadStatusAction", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase");

                    b.HasDiscriminator().HasValue("ChangeLeadStatusAction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.SendEmailAction", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase");

                    b.HasDiscriminator().HasValue("SendEmailAction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.EmailTemplate", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.Template");

                    b.Property<string>("EmailTemplateSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("EmailTemplate");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.SmsTemplate", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.Template");

                    b.HasDiscriminator().HasValue("SmsTemplate");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.CallInteraction", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.LeadInteraction");

                    b.HasDiscriminator().HasValue("CallInteraction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.EmailInteraction", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.LeadInteraction");

                    b.HasDiscriminator().HasValue("EmailInteraction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.SmsInteraction", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.LeadInteraction");

                    b.HasDiscriminator().HasValue("SmsInteraction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TasksAggregate.FetchEmailsTask", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.TasksAggregate.RecurrentTaskBase");

                    b.Property<string>("LastEmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FetchEmailsTask");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TasksAggregate.FetchSmsTask", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.TasksAggregate.RecurrentTaskBase");

                    b.HasDiscriminator().HasValue("FetchSmsTask");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TestAggregate.TestEntity1", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.TestAggregate.TestBase");

                    b.HasDiscriminator().HasValue("TestEntity1");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TestAggregate.TestEntity2", b =>
                {
                    b.HasBaseType("Clean.Architecture.Core.Domain.TestAggregate.TestBase");

                    b.HasDiscriminator().HasValue("TestEntity2");
                });

            modelBuilder.Entity("AreaLead", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasOfInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", null)
                        .WithMany()
                        .HasForeignKey("InterestedLeadsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlan", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "broker")
                        .WithMany("ActionPlans")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("broker");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlanAssociation", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlan", "ActionPlan")
                        .WithMany("ActionPlanAssociations")
                        .HasForeignKey("ActionPlanId");

                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", "lead")
                        .WithMany("ActionPlanAssociations")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");

                    b.Navigation("lead");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionTracker", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlanAssociation", "ActionPlanAssociation")
                        .WithMany("ActionTrackers")
                        .HasForeignKey("ActionPlanAssociationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase", "TrackedAction")
                        .WithMany("ActionTrackers")
                        .HasForeignKey("TrackedActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlanAssociation");

                    b.Navigation("TrackedAction");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlan", "ActionPlan")
                        .WithMany("Actions")
                        .HasForeignKey("ActionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionPlan");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", b =>
                {
                    b.OwnsOne("Clean.Architecture.Core.Domain.AgencyAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("AgencyId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProvinceState")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AgencyId");

                            b1.ToTable("Agencies");

                            b1.WithOwner()
                                .HasForeignKey("AgencyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Area", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", "Agency")
                        .WithMany("Areas")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Listing", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", "Agency")
                        .WithMany("AgencyListings")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Clean.Architecture.Core.Domain.AgencyAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ListingId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProvinceState")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", "Agency")
                        .WithMany("AgencyBrokers")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.BrokerListingAssignment", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("AssignedListings")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Listing", "Listing")
                        .WithMany("BrokersAssigned")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.ConnectedEmail", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("ConnectedEmails")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.FolderSync", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.ConnectedEmail", null)
                        .WithMany("FolderSyncs")
                        .HasForeignKey("ConnectedEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Tag", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("BrokerTags")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Templates.Template", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("Templates")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.ToDoTask", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("Tasks")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.Navigation("Broker");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Interactions.LeadInteraction", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", null)
                        .WithMany("LeadInteractions")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Lead", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", "Agency")
                        .WithMany("Leads")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("Leads")
                        .HasForeignKey("BrokerId");

                    b.HasOne("Clean.Architecture.Core.Domain.AgencyAggregate.Listing", "Listing")
                        .WithMany("LeadsGenerated")
                        .HasForeignKey("ListingId");

                    b.Navigation("Agency");

                    b.Navigation("Broker");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Note", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", "Lead")
                        .WithOne("Note")
                        .HasForeignKey("Clean.Architecture.Core.Domain.LeadAggregate.Note", "LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.NotificationAggregate.Notification", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", "lead")
                        .WithMany("LeadHistoryEvents")
                        .HasForeignKey("LeadId");

                    b.Navigation("lead");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TasksAggregate.RecurrentTaskBase", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", "Broker")
                        .WithMany("RecurrentTasks")
                        .HasForeignKey("BrokerId");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.TestAggregate.TestBase", b =>
                {
                    b.OwnsOne("Clean.Architecture.Core.Domain.TestAggregate.TestJSON", "testJSON", b1 =>
                        {
                            b1.Property<int>("TestBaseId")
                                .HasColumnType("int");

                            b1.HasKey("TestBaseId");

                            b1.ToTable("TestBase");

                            b1.ToJson("testJSON");

                            b1.WithOwner()
                                .HasForeignKey("TestBaseId");

                            b1.OwnsOne("Clean.Architecture.Core.Domain.TestAggregate.Test1Props", "one", b2 =>
                                {
                                    b2.Property<int>("TestJSONTestBaseId")
                                        .HasColumnType("int");

                                    b2.Property<string>("prop1")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("prop2")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TestJSONTestBaseId");

                                    b2.ToTable("TestBase");

                                    b2.WithOwner()
                                        .HasForeignKey("TestJSONTestBaseId");
                                });

                            b1.OwnsOne("Clean.Architecture.Core.Domain.TestAggregate.Test2Props", "two", b2 =>
                                {
                                    b2.Property<int>("TestJSONTestBaseId")
                                        .HasColumnType("int");

                                    b2.Property<string>("prop_2_1")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("prop_2_2")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("TestJSONTestBaseId");

                                    b2.ToTable("TestBase");

                                    b2.WithOwner()
                                        .HasForeignKey("TestJSONTestBaseId");
                                });

                            b1.Navigation("one");

                            b1.Navigation("two");
                        });

                    b.Navigation("testJSON")
                        .IsRequired();
                });

            modelBuilder.Entity("LeadTag", b =>
                {
                    b.HasOne("Clean.Architecture.Core.Domain.LeadAggregate.Lead", null)
                        .WithMany()
                        .HasForeignKey("LeadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Architecture.Core.Domain.BrokerAggregate.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlan", b =>
                {
                    b.Navigation("ActionPlanAssociations");

                    b.Navigation("Actions");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.ActionPlanAssociation", b =>
                {
                    b.Navigation("ActionTrackers");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.ActionPlanAggregate.Actions.ActionBase", b =>
                {
                    b.Navigation("ActionTrackers");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Agency", b =>
                {
                    b.Navigation("AgencyBrokers");

                    b.Navigation("AgencyListings");

                    b.Navigation("Areas");

                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.AgencyAggregate.Listing", b =>
                {
                    b.Navigation("BrokersAssigned");

                    b.Navigation("LeadsGenerated");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.Broker", b =>
                {
                    b.Navigation("ActionPlans");

                    b.Navigation("AssignedListings");

                    b.Navigation("BrokerTags");

                    b.Navigation("ConnectedEmails");

                    b.Navigation("Leads");

                    b.Navigation("RecurrentTasks");

                    b.Navigation("Tasks");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.BrokerAggregate.EmailConnection.ConnectedEmail", b =>
                {
                    b.Navigation("FolderSyncs");
                });

            modelBuilder.Entity("Clean.Architecture.Core.Domain.LeadAggregate.Lead", b =>
                {
                    b.Navigation("ActionPlanAssociations");

                    b.Navigation("LeadHistoryEvents");

                    b.Navigation("LeadInteractions");

                    b.Navigation("Note");
                });
#pragma warning restore 612, 618
        }
    }
}
